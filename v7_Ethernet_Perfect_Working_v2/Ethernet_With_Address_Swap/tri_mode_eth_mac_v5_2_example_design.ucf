# the part selection and associated pin choices (if any) are intended as 
# an example for the family selected.  Please refer to the User Guide
# for more information about IO selection.
CONFIG PART =  xc7vx485tffg1761-2;

#
####
#######
##########
#############
#################
## System level constraints

#############UART LOC #######################################
#NET  USB_UART_RX               LOC = AU36 | IOSTANDARD=LVCMOS18; # Bank  13 VCCO - VCC1V8_FPGA - IO_L8N_T1_13
#NET  USB_UART_RTS              LOC = AT32 | IOSTANDARD=LVCMOS18; # Bank  13 VCCO - VCC1V8_FPGA - IO_L9P_T1_DQS_13
#NET  USB_UART_TX               LOC = AU33 | IOSTANDARD=LVCMOS18; # Bank  13 VCCO - VCC1V8_FPGA - IO_L9N_T1_DQS_13
#NET  USB_UART_CTS              LOC = AR34 | IOSTANDARD=LVCMOS18; # Bank  13 VCCO - VCC1V8_FPGA - IO_L10P_T1_13

########## GENERAL LOC CONSTRAINTS FOR THE VC707 BOARD ##########

Net clk_in_p         LOC = E19  | IOSTANDARD = LVDS;
Net clk_in_n         IOSTANDARD = LVDS;

Net glbl_rst         LOC = AV40  | IOSTANDARD = LVCMOS18 | TIG;


#### Module LEDs_8Bit constraints
Net frame_error      LOC = AM39 | IOSTANDARD=LVCMOS18;
Net frame_errorn     LOC = AN39 | IOSTANDARD=LVCMOS18;
Net activity_flash   LOC = AR37 | IOSTANDARD=LVCMOS18; 
Net activity_flashn  LOC = AT37 | IOSTANDARD=LVCMOS18; 

#### Module Push_Buttons_4Bit constraints
Net update_speed     LOC = AV39 | IOSTANDARD=LVCMOS18; #GPIOSWC
Net config_board     LOC = AW40 | IOSTANDARD=LVCMOS18; #GPIOSWW
Net pause_req_s      LOC = AP40 | IOSTANDARD=LVCMOS18;  #GPIOSWS
Net reset_error      LOC = AR40 | IOSTANDARD=LVCMOS18; #GPIOSWN

#### Module DIP_Switches_4Bit constraints
Net mac_speed<0>    LOC = AV30 | IOSTANDARD=LVCMOS18; #GPIO_DIP_SW0
Net mac_speed<1>    LOC = AY33 | IOSTANDARD=LVCMOS18; #GPIO_DIP_SW1
Net gen_tx_data     LOC = BA31 | IOSTANDARD=LVCMOS18; #GPIO_DIP_SW2
Net chk_tx_data     LOC = BA32 | IOSTANDARD=LVCMOS18; #GPIO_DIP_SW3

Net phy_resetn     LOC = AJ33 | IOSTANDARD=LVCMOS18 | TIG;

# lock to unused header - ensure this is unused
Net serial_response  LOC = AG34  | IOSTANDARD=LVCMOS18; 
Net tx_statistics_s  LOC = AD36  | IOSTANDARD=LVCMOS18;
Net rx_statistics_s  LOC = AD37  | IOSTANDARD=LVCMOS18;

Net mdc              LOC = AH31 | IOSTANDARD=LVCMOS18;
Net mdio             LOC = AK33 | IOSTANDARD=LVCMOS18; 

#SGMII Status
NET  synchronization_done            LOC = AR35 | IOSTANDARD=LVCMOS18; # Bank  13 VCCO - VADJ_FPGA - IO_25_13
NET  linkup                           LOC = AP41 | IOSTANDARD=LVCMOS18;

#-----------------------------------------------------------
# PCS/PMA Clock period Constraints: please do not relax    -
#-----------------------------------------------------------

NET "gtrefclk" TNM_NET = "gtrefclk";
TIMESPEC "ts_gtrefclk" = PERIOD "gtrefclk" 8 ns HIGH 50 %;

NET "txoutclk" TNM_NET = "txoutclk";
TIMESPEC "TS_txoutclk" = PERIOD "txoutclk" 16 ns HIGH 50 %;


#-----------------------------------------------------------
# Transceiver I/O placement:                               -
#-----------------------------------------------------------
NET  gtrefclk_p             LOC = AH8                        ; # Bank 113                 - MGTREFCLK0P_113
NET  gtrefclk_n             LOC = AH7                        ; # Bank 113                 - MGTREFCLK0N_113

NET  txp                LOC = AN2                        ; # Bank 113                 - MGTXTXP1_113
NET  rxp                LOC = AM8                       ; # Bank 113                - MGTXRXP1_113
NET  txn                LOC = AN1                       ; # Bank 113                - MGTXTXN1_113
NET  rxn                LOC = AM7                       ; # Bank 113                - MGTXRXN1_113
#-----------------------------------------------------------
# Fabric Rx Elastic Buffer Timing Constraints:             -
#-----------------------------------------------------------

# Clock period for the recovered Rx clock
NET "core_wrapper/transceiver_inst/RXRECCLK" TNM_NET = "rxrecclk";
TIMESPEC "ts_rxrecclk" = PERIOD "rxrecclk" 8 ns;

# Identify clock domain crossing registers
INST "core_wrapper/transceiver_inst/rx_elastic_buffer_inst/wr_addr_gray*" TNM = "wr_graycode";
INST "core_wrapper/transceiver_inst/rx_elastic_buffer_inst/rd_addr_gray*" TNM = "rd_graycode";

# Control Gray Code delay and skew across clock boundary
TIMESPEC "ts_rx_skew_control1" = FROM "wr_graycode" TO "FFS" 14 ns DATAPATHONLY;
TIMESPEC "ts_rx_skew_control2" = FROM "rd_graycode" TO "FFS" 14 ns DATAPATHONLY;

# Constrain between Distributed Memory (output data) and the 1st set of flip-flops
INST "core_wrapper/transceiver_inst/rx_elastic_buffer_inst/rd_data*"  TNM = "fifo_read";
TIMESPEC "ts_ram_read_false_path" = FROM "RAMS" TO "fifo_read"  6 ns DATAPATHONLY;




########## GMII LOC CONSTRAINTS ##########

#
####
#######
##########
#############
#################
#EXAMPLE DESIGN CONSTRAINTS

############################################################
# Clock Period Constraints                                 #
############################################################


############################################################
# RX Clock period Constraints                              #
############################################################
# Receiver clock period constraints: please do not relax
#NET "gmii_rx_clk"                TNM_NET  = "clk_rx";
#TIMESPEC "TS_rx_clk"       = PERIOD "clk_rx" 8000 ps HIGH 50 %;

############################################################
# TX Clock period Constraints                              #
############################################################
# Transmitter clock period constraints: please do not relax
NET "clk_in_p" TNM_NET = "clk_in_p";
TIMESPEC "TS_clk_in_p" = PERIOD "clk_in_p" 5.000 ns HIGH 50% INPUT_JITTER 50.0ps;

NET "userclk2" TNM_NET = "userclk2";

#set to use clock backbone - this uses a long route to allow the MMCM to be placed in the other half of the device
#NET "clk_in_p" CLOCK_DEDICATED_ROUTE = BACKBONE;

#NET "gtx_clk_bufg" TNM_NET = "clk_gtx";
#TIMESPEC "TS_gtx_clk"      = PERIOD "clk_gtx" 8000 ps HIGH 50 %;

#NET "*tx_mac_aclk*"              TNM_NET  = "clk_tx_mac";
#TIMESPEC "TS_tx_clk_gmii"  = PERIOD "clk_tx_mac" 8000 ps HIGH 50 %;

############################################################
# AXI-Lite Clock period Constraints                        #
############################################################
# ignore timing from gtx_clk to the cpu clock
TIMESPEC "TS_glbl_rst" = FROM "clock_generator_clkout0" TO "clock_generator_clkout1" TIG;


#
####
#######
##########
#############
#################
#AXI4-STREAM FIFO CONSTRAINTS

############################################################
# FIFO Clock Crossing Constraints                          #
############################################################
## TX Client FIFO
# Group the clock crossing signals into timing groups
INST "*user_side_FIFO/tx_fifo_i/rd_tran_frame_tog"              TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO/tx_fifo_i/rd_txfer_tog"                   TNM = "tx_fifo_rd_to_wr";

INST "*user_side_FIFO/tx_fifo_i/wr_frame_in_fifo"               TNM = "tx_fifo_wr_to_rd";

#TIMESPEC "TS_tx_fifo_rd_to_wr"   = FROM "tx_fifo_rd_to_wr" TO "clk_gtx" 7800 ps DATAPATHONLY;
#TIMESPEC "TS_tx_fifo_wr_to_rd"   = FROM "tx_fifo_wr_to_rd" TO clk_tx_mac 7800 ps DATAPATHONLY;

TIMESPEC "TS_tx_fifo_rd_to_wr"   = FROM "tx_fifo_rd_to_wr" TO userclk2 7800 ps DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd"   = FROM "tx_fifo_wr_to_rd" TO userclk2 7800 ps DATAPATHONLY;

# Reduce clock period to allow for metastability settling time

# constrain the input to this register - this is a multicycle path due to the
# resync of the control
INST "*user_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_addr_rd";
INST "*user_side_FIFO/tx_fifo_i/wr_rd_addr*"                    TNM = "tx_addr_wr";

TIMESPEC "TS_tx_fifo_addr"       = FROM "tx_addr_rd" TO "tx_addr_wr" 10ns;


## RX Client FIFO
# Group the clock crossing signals into timing groups
INST "*user_side_FIFO/rx_fifo_i/wr_store_frame_tog"             TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO/rx_fifo_i/rd_addr*"                       TNM = "rx_fifo_rd_to_wr";

#TIMESPEC "TS_rx_fifo_wr_to_rd"   = FROM "rx_fifo_wr_to_rd" TO "clk_gtx" 7800 ps DATAPATHONLY;
#TIMESPEC "TS_rx_fifo_rd_to_wr"   = FROM "rx_fifo_rd_to_wr" TO "clk_rx" 7800 ps DATAPATHONLY;
TIMESPEC "TS_rx_fifo_wr_to_rd"   = FROM "rx_fifo_wr_to_rd" TO "userclk2" 7800 ps DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr"   = FROM "rx_fifo_rd_to_wr" TO "userclk2" 7800 ps DATAPATHONLY;



#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS

############################################################
# External GMII Constraints                                #
############################################################

# GMII Transmitter Constraints:  place flip-flops in IOB
#INST "*trimac_block*gmii_interface*gmii_txd*"                     IOB = true;
#INST "*trimac_block*gmii_interface*gmii_tx_en"                    IOB = true;
#INST "*trimac_block*gmii_interface*gmii_tx_er"                    IOB = true;

# GMII Receiver Constraints:  place flip-flops in IOB
#INST "*trimac_block*gmii_interface*rxd_to_mac*"                   IOB = true;
#INST "*trimac_block*gmii_interface*rx_dv_to_mac"                  IOB = true;
#INST "*trimac_block*gmii_interface*rx_er_to_mac"                  IOB = true;

############################################################
# The following are required to maximise setup/hold        #
############################################################

#INST "gmii_txd<?>"                                                SLEW = FAST;
#INST "gmii_tx_en"                                                 SLEW = FAST;
#INST "gmii_tx_er"                                                 SLEW = FAST;
#INST "gmii_tx_clk"                                                SLEW = FAST;


############################################################
# GMII: IODELAY Constraints
############################################################
# Please modify the value of the IDELAY_VALUE
# according to your design.
# For more information on IDELAYCTRL and IODELAY, please
# refer to the Series-7 User Guide.
#INST "*trimac_block*gmii_interface*delay_gmii_rx_dv"              IDELAY_VALUE = 30;
#INST "*trimac_block*gmii_interface*delay_gmii_rx_er"              IDELAY_VALUE = 30;
#INST "*trimac_block*gmii_interface*delay_gmii_rxd"                IDELAY_VALUE = 30;
# Group IODELAY and IDELAYCTRL components to aid placement
#INST "*trimac_block*gmii_interface*delay_gmii_rx_dv"              IODELAY_GROUP = "grp1";
#INST "*trimac_block*gmii_interface*delay_gmii_rx_er"              IODELAY_GROUP = "grp1";
#INST "*trimac_block*gmii_interface*delay_gmii_rxd"                IODELAY_GROUP = "grp1";
#INST "*trimac_block*dlyctrl"                                      IODELAY_GROUP = "grp1";




############################################################
# For Setup and Hold time analysis on GMII inputs          #
############################################################

# Identify GMII Rx Pads only.  
# This prevents setup/hold analysis being performed on false inputs,
# eg, the configuration_vector inputs.
#INST "gmii_rxd<?>"                                                TNM = IN_GMII; 
#INST "gmii_rx_er"                                                 TNM = IN_GMII;
#INST "gmii_rx_dv"                                                 TNM = IN_GMII;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
 
# GMII_RX_CLK.
# Due to the early nature of speed files for this family this constraint has been relaxed
 
#TIMEGRP "IN_GMII" OFFSET         = IN  2.7 ns VALID 3.2 ns BEFORE "gmii_rx_clk"; 



#
####
#######
##########
#############
#################
#CORE CONSTRAINTS



############################################################
# Crossing of Clock Domain Constraints: please do not edit #
############################################################
# Flow Control logic reclocking - control sugnal is synchronised
INST "*trimac_core*FLOW*PAUSE_REQ_TO_TX*"                        TNM="flow_rx_to_tx";
INST "*trimac_core*FLOW*PAUSE_VALUE_TO_TX*"                      TNM="flow_rx_to_tx";
#TIMESPEC "TS_flow_rx_to_tx"      = FROM "flow_rx_to_tx" TO clk_tx_mac 7800 ps DATAPATHONLY;
TIMESPEC "TS_flow_rx_to_tx"      = FROM "flow_rx_to_tx" TO userclk2 7800 ps DATAPATHONLY;

# generate a group of all flops NOT in the axi clock domain
TIMEGRP "ffs_except_axi"        = FFS EXCEPT "clock_generator_clkout1" "mdio_logic";
TIMESPEC "TS_config_to_all"      = FROM "clock_generator_clkout1" TO "ffs_except_axi" TIG;


# Ignore stats serialiser clock crossing as handled by toggle sync
INST "*x_stats_shift*"                                           TNM="sync_ok";
#TIMESPEC "TS_rxstats_sync" = FROM "clk_rx" TO "sync_ok"          TIG;
#TIMESPEC "TS_txstats_sync" = FROM "clk_tx_mac" TO "sync_ok"      TIG;
#TIMESPEC "TS_rxstats_sync" = FROM "userclk2" TO "sync_ok"          TIG;
#TIMESPEC "TS_txstats_sync" = FROM "userclk2" TO "sync_ok"      TIG;

# Ignore pause deserialiser as only present to prevent logic stripping
INST "pause_val*"                                                TNM="pause_dsr";
INST "pause_req*"                                                TNM="pause_dsr";
TIMESPEC "TS_pause_dsr" = FROM "pause_dsr"                       TIG;

# Statistics counters
# need to ignore standard sync logic
INST "*trimac_core*STATGEN*request_toggle*"                      TNM="stats_host_to_ref";
#TIMESPEC "TS_stats_host_to_ref"  = FROM "stats_host_to_ref" TO "clk_gtx" 8000 ps DATAPATHONLY; 
TIMESPEC "TS_stats_host_to_ref"  = FROM "stats_host_to_ref" TO "userclk2" 8000 ps DATAPATHONLY;

# Also ignore paths from ref clock to axi and back
INST "*trimac_core*STATGEN*ipic_rd_clear*"                       TNM="stats_ref_to_host";
INST "*trimac_core*STATGEN*response_toggle*"                     TNM="stats_ref_to_host";
INST "*trimac_core*STATGEN*rd_data_ref*"                         TNM="stats_ref_to_host";
TIMESPEC "TS_stats_ref_to_host"  = FROM "stats_ref_to_host" TO "clock_generator_clkout1" 8000 ps DATAPATHONLY; 

INST "*trimac_core*STATGEN*ipic_rd_clear*"                       TNM="stats_addr";
INST "*trimac_core*STATGEN*rd_data_ref*"                         TNM="stats_addr";
TIMESPEC "TS_stats_addr"         = FROM "clock_generator_clkout1" TO "stats_addr" 8000 ps DATAPATHONLY; 

# add a pin tig on the bufgmux as we always follow a speed change with a reset
# also do not want to time to the select
#PIN "*clock_inst*bufgmux_speed_clk.I1" TIG;
#PIN "*clock_inst*bufgmux_speed_clk.CE0" TIG;



############################################################
# Ignore paths to resync flops
############################################################
INST "*/data_sync"                                                TNM = "resync_reg";
INST "*/reset_sync*"                                              TNM = "resync_reg";
TIMESPEC "ts_resync_flops"       = TO "resync_reg" TIG;


############################################################
# MDIO Constraints: please do not edit                     #
############################################################

# Place the MDIO logic in it's own timing groups
INST "*trimac_core*MANIFGEN*ENABLE_REG*"                          TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN*READY_INT*"                           TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN*STATE_COUNT*"                         TNM = FFS "mdio_logic";
INST "*trimac_core*MANIFGEN*MDIO_TRISTATE*"                       TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN*MDIO_OUT*"                            TNM = "mdio_logic";

TIMESPEC "TS_mdio"              = PERIOD "mdio_logic" "TS_clock_generator_clkout1" * 40 PRIORITY 0;

